def productFiles = ["connecthub", "finsense", "prism"]
def DRY_RUN_STATUS = "FAIL"
def safeCommitMsg = ""

pipeline {
    agent any

    environment {
        DEV_SERVER     = ''
        UAT_SERVER     = '13.235.152.196'
        PROD_SERVER    = ''
        SSH_KEY        = 'fluent-bit-user'
        GIT_TOKEN      = 'sourav-github-token'
        MASTER_REPO    = 'https://github.com/souravgharge-ftpl/fluent-bit-config-master.git'
    }

    stages {

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Config Repo') {
            steps {
                git(
                    url: 'https://github.com/souravgharge-ftpl/fluent-bit-config.git',
                    branch: 'main',
                    credentialsId: 'sourav-github-token'
                )
            }
        }

        stage('Get Commit Message') {
            steps{
                script {
                    def commitMsg = sh(
                        script: 'git log -1 --pretty=%B',
                        returnStdout: true
                    ).trim()
                    safeCommitMsg = commitMsg.replace("'", "'\"'\"'")

                    echo "Latest commit message: ${safeCommitMsg}"
                }
            }
        }

        stage('Prepare Remote Directory') {
            steps {
                sshagent([env.SSH_KEY]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no fluent-bit-user@${UAT_SERVER} "\
                            rm -rf /home/fluent-bit-user/fluent-bit/git-check && \
                            mkdir -p /home/fluent-bit-user/fluent-bit/git-check"

                        scp -o StrictHostKeyChecking=no -r common fluent-bit-user@${UAT_SERVER}:/home/fluent-bit-user/fluent-bit/git-check/
                    """
                }
            }
        }

        stage('Generate Configs & Copy to Remote') {
            steps {
                sshagent([env.SSH_KEY]) {
                    script {
                        def inputTemplate  = readFile('common/template/fluentbit_input_template.conf')
                        def outputTemplate = readFile('common/template/fluentbit_output_template.conf')
                        def masterTemplate = readFile('common/template/fluentbit_master_template.conf')
                        def includesBlock  = ""

                        productFiles.each { product ->
                            def csvPath = "${product}/fluentbit_config_${product}_uat.csv"
                            def envName = csvPath.replace('.csv', '').tokenize('_')[3]
                            echo "Product: ${product}"
                            echo "Environment: ${envName}"

                            def lines = readFile(csvPath).split('\n')
                            def combinedInput = ""
                            def combinedOutput = ""

                            lines.eachWithIndex { line, idx ->
                                if (idx == 0 || line.startsWith("#")) return
                                def (deployment, index, firstline, multiline) = line.split(",", -1)
                                deployment = deployment.trim()
                                index      = index.trim()
                                firstline  = firstline?.trim() ?: ""
                                multiline  = multiline?.trim() ?: ""

                                def parserLine = ""
                                if (firstline) parserLine += "    Parser_Firstline    ${firstline}\n"
                                if (multiline) parserLine += "    Parser_N            ${multiline}\n"

                                combinedInput += inputTemplate
                                    .replace("{{DEPLOYMENT}}", deployment)
                                    .replace("{{PARSER_LINE}}", parserLine) + "\n"

                                combinedOutput += outputTemplate
                                    .replace("{{DEPLOYMENT}}", deployment)
                                    .replace("{{INDEX}}", index) + "\n"
                            }

                            def finalConf = combinedInput + combinedOutput
                            def outputFileName = "fluentbit_config_${product}_uat.conf"
                            def outputPath = "${product}/${outputFileName}"
                            writeFile file: outputPath, text: finalConf

                            includesBlock += "@include /fluent-bit/etc/includes/${product}/${outputFileName}\n"

                            sh """
                                ssh -o StrictHostKeyChecking=no fluent-bit-user@${UAT_SERVER} \
                                    "mkdir -p /home/fluent-bit-user/fluent-bit/git-check/${product}"
                                scp -o StrictHostKeyChecking=no "${outputPath}" \
                                    fluent-bit-user@${UAT_SERVER}:/home/fluent-bit-user/fluent-bit/git-check/${product}/
                            """
                        }

                        def combinedFilter = "@include /fluent-bit/etc/includes/common/all-filters.conf\n\n"

                        def masterConf = masterTemplate.contains("{{PRODUCT_INCLUDES}}")
                            ? masterTemplate.replace("{{PRODUCT_INCLUDES}}", includesBlock)
                            : masterTemplate.trim() + "\n" + includesBlock + combinedFilter

                        writeFile file: "master-2.conf", text: masterConf

                        sh """
                            scp -o StrictHostKeyChecking=no master-2.conf fluent-bit-user@${UAT_SERVER}:/home/fluent-bit-user/fluent-bit/git-check/
                        """
                    }
                }
            }
        }

        stage('Dry Run in Debug Pod (Remote)') {
            steps {
                sshagent([env.SSH_KEY]) {
                    script {
                        def kubectl = '/home/linuxbrew/.linuxbrew/bin/kubectl'
                        def dryRunFile = "/home/fluent-bit-user/fluent-bit/git-check/dry_run_output.txt"

                        // Create debug pod, copy configs, run dry-run
                        sh """
                            ssh -o StrictHostKeyChecking=no fluent-bit-user@${UAT_SERVER} '\
                                ${kubectl} delete pod fluent-bit-debug -n opensearch --ignore-not-found && \
                                ${kubectl} run fluent-bit-debug \
                                    --image=cr.fluentbit.io/fluent/fluent-bit:4.0.7-debug \
                                    --restart=Never \
                                    --namespace=opensearch \
                                    --command -- sleep 600 && \
                                ${kubectl} wait --for=condition=Ready pod/fluent-bit-debug -n opensearch --timeout=60s && \
                                ${kubectl} cp /home/fluent-bit-user/fluent-bit/git-check/ opensearch/fluent-bit-debug:/fluent-bit/etc/includes/ && \
                                ${kubectl} cp /home/fluent-bit-user/fluent-bit/git-check/master-2.conf opensearch/fluent-bit-debug:/fluent-bit/etc/fluent-bit.conf && \
                                ${kubectl} exec fluent-bit-debug -n opensearch -- \
                                    /fluent-bit/bin/fluent-bit --dry-run -c /fluent-bit/etc/fluent-bit.conf -v \
                                    > ${dryRunFile} 2>&1
                            '
                        """

                        // Check success in remote file
                        def statusCheck = sh(
                            script: """
                                ssh -o StrictHostKeyChecking=no fluent-bit-user@${UAT_SERVER} '\
                                    grep -Fq "configuration test is successful" ${dryRunFile} && echo True || echo False
                                '
                            """,
                            returnStdout: true
                        ).trim()

                        DRY_RUN_STATUS = (statusCheck == "True") ? "SUCCESS" : "FAIL"

                        // Show last lines from remote file
                        sh """
                            ssh -o StrictHostKeyChecking=no fluent-bit-user@${UAT_SERVER} "\
                                rm ${dryRunFile}"
                        """

                        echo "Dry run status: ${DRY_RUN_STATUS}"
                    }
                }
            }
        }

        stage("Git Push Test (Force Local Changes)") {
            steps {
                sshagent([env.SSH_KEY]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no fluent-bit-user@${UAT_SERVER} '\
                            cd /home/fluent-bit-user/fluent-bit/git-check && \
                            if [ ! -d .git ]; then \
                                git init && \
                                git checkout -b main; \
                            fi && \
                            git config user.email "souravg@finfactor.in" && \
                            git config user.name "souravgharge-ftpl" && \
                            git remote remove origin || true && \
                            git remote add origin git@github.com:souravgharge-ftpl/fluent-bit-config-master.git && \
                            git fetch origin main || echo "No remote main yet" && \
                            git checkout -B main && \
                            git reset --hard origin/main || echo "No remote history" && \
                            git pull origin main --allow-unrelated-histories || echo "Nothing to pull" && \
                            git add -u && \
                            git add . && \
                            git commit -m '${safeCommitMsg}' || echo "No changes to commit" && \
                            git push origin main
                        '
                    """
                }
            }
        }

    }

    post {
        always {
            echo "Pipeline finished. DRY_RUN_STATUS = ${DRY_RUN_STATUS}"
        }
        failure {
            echo "Pipeline failed. DRY_RUN_STATUS was ${DRY_RUN_STATUS}"
        }
    }
}
